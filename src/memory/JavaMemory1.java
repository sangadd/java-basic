package memory;

public class JavaMemory1 {
    /*
    <<<자바 메모리 구조>>>

       A.class      method1() frame   A.안스턴스
       B.class      data1 = x001      B.인스턴스
       붕어빵 틀
                    main() frame
                    args[]
     메서드 영역   /    스택 영역       /     힙 영역


    method1() frame data1 = x001 이 코드 설명
    - method1() 함수가 호출되면 스택에 해당 함수의 프레임이 생성됨
    - frame 은 method1의 스택 프레임을 의미함
    - data1 = x001은 이 프레임에서 저장된 데이터 중 하나로 data1 이라는 변수가 스택 프레임에 저장되며 그 값이 x001이다.

    - 즉 함수 호출 시, 함수 내부의 로컬 변수나 매개변수, 반환 주소 등이 스택에 저장
    - 예시
    void method1() {
        int data1 = 1; // 스택 프레임에 저장됨
    }
    위 코드에서 data1은 method1의 스택 프레임에 포함됨

    main() frame args[] 이 코드 설명
    - main 함수는 프로그램 시작점
    - frame은 main 함수가 실행될 때 생성되는 스택 프레임임
    - args[]은 명령중 인수를 저장하는 배열

    - 즉 프로그램이 실행될 때, 운영 체제가 명령줄 인수를 args[] 배열에 전달됨
    - 예시
    public static void main(String[] args) {
        System.out.println(args[0]);
    }
    위 코드에서 args[0]은 명령줄에서 첫 번째로 전달된 인수를 출력함

    ** 스택 프레임은 함수가 호출될 때 생성되는 메모리 구조를 말함 / 함수가 실행되기 위해 필요한 데이터를 저장하고 관리하는 단위로 스택 메모리에 생성됨

    ----------------------------------------------------------------------

    자바의 메모리 구조는 크게 메서드 영역, 스택 영역, 힙 영역 3개로 나눌 수 있다.

    1. 메서드 영역 : 클래스 정보를 보관한다. 이 클래스 정보가 붕어빵 틀이다.

    2. 스택 영역 : 실제 프로그램이 실행되는 영역이다. 메서드를 실행할 때 마다 하나씩 쌓인다.

    3. 힙 영역 : 객체(인스턴스)가 생성되는 영역이다. new 명령어를 사용하면 이 영역을 사용한다.
    쉽게 말해 붕어빵 틀로부터 생성된 붕어빵이 존재하는 공간이다. 참고로 배열도 이 영역에 생성된다.

    ----------------------------------------------------------------------

    <<<자바 메모리 구조 - 실제>>>

            클래스 정보
    클래스, 메서드 등 실행 코드

            static 영역                method1() frame
          static 변수 보관               data1 = x001
                                                              value = 10
             상수 풀                   main() frame          <Data 인스턴스>
           "hello", 123                 args[]

             메서드 영역            /    스택 영역       /       힙 영역

    1. 메서드 영역 (Method Area)
    메서드 영역은 프로그램을 실행하는데 필요한 공통 데이터를 관리함
    이 영역은 프로그램의 모든 영역에서 공유함
        - 클래스 정보 : 클래스의 실행 코드 (바이트 코드), 필드, 메서드와 생성자 코드 등 모든 실행 코드가 존재함
        - static 영역 : static 변수들을 보관한다. 뒤에서 자세히 설명함
        - 런타임 상수 풀 : 프로그램을 실행하는데 필요한 공통 리터럴 상수를 보관함
                           예를 들어서 프로그램에 "hello"라는 리터럴 문자가 있으면 이런 문자를 공통으로 묶어서 관리함
                           이외에도 프로그램을 효율적으로 관리하기 위한 상수들을 관리함

    2. 스택 영역 (Stack Area)
    자바 실행 시 하나의 실행 스택이 생성됨
    각 스택 프레임은 지역 변수, 중간 연산 결과, 메서드 호출 정보 등을 포함함
        - 스택 프레임 : 스택 영역에 쌓이는 네모 박스가 하나의 스택 프레임이다.
                       메서드를 호출할 때마다 하나의 스택 프레임이 쌓이고 메서드가 종료되면 해당 스택 프레임이 제거됨

    3. 힙 영역 (Heap Area)
    객체(인스턴스)와 배열이 생성되는 영역이다.
    가비지 컬렉션(GC)이 이루어지는 주요 영역이며 더 이상 참조되지 않은 객체는 GC에 의해 제거됨

    ----------------------------------------------------------------------

    [참고]
    스택 영역은 더 정확히는 각 쓰레드별로 하나의 실행 스택이 생성됨
    따라서 쓰레드 수 만큼 스택 영역이 생성된다.
    지금은 쓰레드를 1개만 사용하므로 스택 영역도 하나임 쓰레드는 멀티 쓰레드를 알아야 이해 가능

    ** 쓰레드(Tread)
    - 하나의 프로세스(시스템에서 실행중인 프로그램을 의미함) 안에서 독립적으로 실행되는 작은 실행 단위를 의미함
    - Java에서 스레드는 ‘멀티 스레드(Multi-Thread)’을 지원하여 하나의 프로세스 안에 한 개 이상의 스레드를 지원하는 구조
    */
}
