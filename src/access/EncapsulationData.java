package access;

public class EncapsulationData {
    /*
    캡슐화

    캡슐화는 데이터와 데이터를 처리하는 메서드를 하나로 모으는 것에 초점을 맞추었다.
    더 나아가 캡슐화를 안전하게 완성할 수 있게 해주는 장치가 접근 제어자임

    그럼 어떤 것을 숨기고 어떤 것을 노출해야 할까?

    1. 데이터 숨기기
    객체에는 속성(데이터)과 기능(메서드)이 있다.
    캡슐화에서 가장 필수로 숨겨야 하는 것은 속성(데이터)이다. Speaker의 volume을 배우면서(Speaker.java 확인)
    객체 내부의 데이터를 외부에서 함부로 접근하게 두면 클래스 안에서 데이터를 다루는 모든 로직을 무시하고 데이터를 변경할 수 있다.
    결국 모든 안전망을 다 빠져나가게 된다. (캡슐화가 깨짐)

    우리가 자동차를 운전할 때 자동차 부품을 다 열어서 그 안에 있는 속도계를 직접 조절하지 않고 자동차가 제공하는 엑셀 기능을 사용해서
    엑셀을 밟으면 자동차가 나머지는 다 알아서 하는 것임

    우리가 일상에서 생각할 수 있는 음악 플레이어를 떠올려보자!
    음악 플레이를 사용할 때 그 내부에 들어있는 전원부나 볼륨 상태의 데이터를 직접 수정할 일이 있을까?
    우리는 그냥 음악 플레이어의 켜고 끄고 볼륨을 조절하는 버튼을 누를 뿐이다. 그 내부에 있는 전원부나 볼륨의 상태 데이터를 직접 수정 X
    전원 버튼을 눌렀을 때 실제 전원을 받아서 전원을 켜는 것은 음악 플레이어의 일이다.
    볼륨을 높였을 때 내부에 있는 볼륨 장치들을 움직이고 볼륨 수치를 조절하 것도 음악 플레이어가 스스로 해야하는 일이다.
    즉 우리는 음악 플레이어가 제공하는 기능을 통해 음악 플레이어를 사용하는 것임

    => 객체의 데이터는 객체가 제공하는 기능인 메서드를 통해서 접근해야 한다!!!

    2. 기능 숨기기
    객체의 기능 중에서 외부에서 사용하지 않고 내부에서만 사용하는 기능들이 있다.
    이런 기능도 모두 감추는 것이 좋다
    
    우리가 자동차를 운전하기 위해 자동차가 제공하는 복잡한 엔진 조절 기능, 배기 기능까지 우리가 알 필요는 X
    우리는 단지 엑셀과 핸들 정도의 기능만 알면 됨 
    만약 사용자에게 이런 기능까지 모두 알려준다면 사용자가 자동차에 대해 너무 많은 것을 알아야 함 
    즉 사용자 입장에서 꼭 필요한 기능만 외부에 노출하고 나머지 기능은 모두 내부로 숨기자 
    
    => 데이터는 모두 숨기고 기능은 꼭 필요한 기능만 노출하는 것이 좋은 캡슐화이다!!!
     */
}
